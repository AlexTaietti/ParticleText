{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./tmp/js/script.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFa;;AAEb,iDAAiD,0CAA0C,0DAA0D,EAAE;;AAEvJ,2CAA2C,gBAAgB,kBAAkB,OAAO,2BAA2B,wDAAwD,gCAAgC,uDAAuD,2DAA2D,EAAE;;AAE3T,6DAA6D,sEAAsE,8DAA8D,oBAAoB;;AAErN,2CAA2C,kBAAkB,kCAAkC,qEAAqE,EAAE,EAAE,OAAO,kBAAkB,EAAE,YAAY;;AAE/M,uBAAuB,2BAA2B,2EAA2E,kCAAkC,mBAAmB,GAAG,EAAE,OAAO,kCAAkC,8HAA8H,GAAG,EAAE,qBAAqB;;AAExX;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;;AAElC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,6FAA6F;;AAE7F,6FAA6F;;AAE7F;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA,sCAAsC,8CAA8C;AACpF;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;;AAE7B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,mBAAmB,sBAAsB;AACzC;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uCAAuC;;AAEvC;AACA;AACA;;AAEA;AACA;AACA;;AAEA,gCAAgC,2BAA2B;AAC3D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,sEAAsE,wBAAwB;AAC9F;AACA;AACA;AACA,4CAA4C;;AAE5C,4CAA4C;;AAE5C,4CAA4C;;AAE5C,4CAA4C;;AAE5C,iEAAiE;;AAEjE,iEAAiE;;AAEjE,+DAA+D;;AAE/D,+DAA+D;;AAE/D,gFAAgF;AAChF;;AAEA,2DAA2D;;AAE3D,2DAA2D;;AAE3D,2DAA2D;;AAE3D,6DAA6D;AAC7D;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,E","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./tmp/js/script.js\");\n","\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nwindow.onload = function () {\n  var PARTICLE_PROPS = 13;\n  var PI2 = Math.PI * 2;\n  var SIN = Math.sin;\n  var COS = Math.cos;\n\n  function randomInRange(min, max) {\n    return Math.random() * (max - min) + min;\n  }\n\n  function distanceBetweenPoints(p1x, p1y, p2x, p2y) {\n    return Math.sqrt((p1x - p2x) * (p1x - p2x) + (p1y - p2y) * (p1y - p2y));\n  }\n\n  function mergeObjects(target, object) {\n    var deep = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    for (var prop in object) {\n      if (target.hasOwnProperty(prop)) {\n        if (_typeof(object[prop]) === 'object' && deep) {\n          target[prop] = mergeObjects(target[prop], object[prop], true);\n        } else {\n          target[prop] = object[prop];\n        }\n      }\n    }\n\n    return target;\n  }\n\n  var ParticleText = /*#__PURE__*/function () {\n    function ParticleText(string, element) {\n      var _this = this;\n\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      _classCallCheck(this, ParticleText);\n\n      _defineProperty(this, \"animate\", function () {\n        _this.renderParticles(_this.defaults.particles);\n\n        _this.frameID = window.requestAnimationFrame(_this.animate);\n      });\n\n      //setting up the canvases needed for ParticleText\n      var canvas = createFitCanvas(element);\n      var $referenceCanvas = createCanvasFrom(canvas);\n      var _defaults = {\n        particles: {\n          //particle shape\n          pointSpacing: 5,\n          particleMaxRadius: 2,\n          //particle motion\n          revolutionRadius: 2,\n          revolutionSlowness: 5\n        },\n        text: {\n          fontSize: 150,\n          fontFamily: 'serif',\n          padding: 50\n        }\n      };\n      this.defaults = mergeObjects(_defaults, options, true);\n      this.context = canvas.getContext('2d');\n      this.text = new Text(string, $referenceCanvas, this.defaults.text).initialise();\n      this.particles = getParticlesFromImage(this.text.image, this.defaults.particles);\n      this.particlePointer = null; //will hold the ID frame (used to toggle the play-state of the animation)\n\n      this.frameID = undefined;\n    }\n\n    _createClass(ParticleText, [{\n      key: \"updateText\",\n      value: function updateText(string) {\n        this.text.update(string);\n        this.particles = getParticlesFromImage(this.text.image, this.defaults.particles);\n      }\n    }, {\n      key: \"updateCurrentParticle\",\n      value: function updateCurrentParticle(_ref) {\n        var revolutionSlowness = _ref.revolutionSlowness,\n            revolutionRadius = _ref.revolutionRadius;\n        this.particles[this.particlePointer + 4] += this.particles[this.particlePointer + 6]; //add the direction.x value of the particle to its movement's progression x value\n\n        this.particles[this.particlePointer + 5] += this.particles[this.particlePointer + 7]; //add the direction.y value of the particle to its movement's progression y value\n\n        this.particles[this.particlePointer] = this.particles[this.particlePointer + 2] + COS(this.particles[this.particlePointer + 4] / revolutionSlowness) * revolutionRadius;\n        this.particles[this.particlePointer + 1] = this.particles[this.particlePointer + 3] + SIN(this.particles[this.particlePointer + 5] / revolutionSlowness) * revolutionRadius;\n      }\n    }, {\n      key: \"drawCurrentParticle\",\n      value: function drawCurrentParticle() {\n        this.context.fillStyle = \"rgba(\".concat(this.particles[this.particlePointer + 9], \", \").concat(this.particles[this.particlePointer + 10], \", \").concat(this.particles[this.particlePointer + 11], \", \").concat(this.particles[this.particlePointer + 12], \")\");\n        this.context.beginPath();\n        this.context.arc(this.particles[this.particlePointer], this.particles[this.particlePointer + 1], this.particles[this.particlePointer + 8], 0, PI2);\n        this.context.fill();\n      }\n    }, {\n      key: \"renderParticles\",\n      value: function renderParticles(particlesOptions) {\n        this.context.clearRect(0, 0, this.context.canvas.width, this.context.canvas.height);\n\n        for (this.particlePointer = 0; this.particlePointer < this.particles.length; this.particlePointer += PARTICLE_PROPS) {\n          this.updateCurrentParticle(particlesOptions);\n          this.drawCurrentParticle();\n        }\n      }\n    }]);\n\n    return ParticleText;\n  }();\n\n  var Text = /*#__PURE__*/function () {\n    function Text(string, context, options) {\n      _classCallCheck(this, Text);\n\n      this.string = string;\n      this.context = context;\n      this.fontFamily = options.fontFamily;\n      this.fontSize = options.fontSize;\n      this.font = this.context.font = \"\".concat(this.fontSize, \"px \").concat(this.fontFamily);\n      this.padding = options.padding;\n      this.image = undefined; //set default baseline in canvas\n\n      this.context.textBaseline = 'top';\n      this.context.textAlign = 'center';\n    }\n\n    _createClass(Text, [{\n      key: \"renderFormattedString\",\n      value: function renderFormattedString() {\n        var words = this.string.split(\" \"),\n            finalText = [];\n        var line = \"\",\n            x,\n            y,\n            i;\n\n        for (i = 0; i < words.length; i++) {\n          if (this.context.measureText(line + words[i] + \" \").width >= this.context.canvas.width - this.padding * 2) {\n            finalText.push(line);\n            line = \"\";\n          }\n\n          line += words[i] + \" \";\n        }\n\n        finalText.push(line);\n        var totalTextHeight = this.fontSize * finalText.length;\n\n        for (i = 0; i < finalText.length; i++) {\n          this.context.fillText(finalText[i], this.context.canvas.width / 2, this.context.canvas.height / 2 - totalTextHeight / 2 + this.fontSize * i);\n        }\n\n        this.image = this.context.getImageData(0, 0, this.context.canvas.width, this.context.canvas.height);\n      }\n    }, {\n      key: \"initialise\",\n      value: function initialise() {\n        this.renderFormattedString();\n        return this;\n      }\n    }, {\n      key: \"update\",\n      value: function update(string) {\n        this.string = string;\n        this.renderFormattedString();\n        return this;\n      }\n    }, {\n      key: \"setFontSize\",\n      value: function setFontSize(fontSize) {\n        this.fontSize = fontSize;\n        this.font = this.context.font = \"\".concat(this.fontSize, \"px \").concat(this.fontFamily);\n        return this;\n      }\n    }, {\n      key: \"setFontFamily\",\n      value: function setFontFamily(fontFamily) {\n        this.fontFamily = fontFamily;\n        this.font = this.context.font = \"\".concat(this.fontSize, \"px \").concat(this.fontFamily);\n        return this;\n      }\n    }]);\n\n    return Text;\n  }();\n\n  function createCanvasFrom(canvas) {\n    var referenceCanvas = document.createElement('canvas');\n    var $referenceCanvas = referenceCanvas.getContext('2d');\n    $referenceCanvas.canvas.width = referenceCanvas.width = canvas.width;\n    $referenceCanvas.canvas.height = referenceCanvas.height = canvas.height;\n    return $referenceCanvas;\n  }\n\n  function createFitCanvas(element) {\n    var canvas = document.createElement('canvas');\n    var $canvas = canvas.getContext('2d');\n    $canvas.canvas.width = canvas.width = element.offsetWidth;\n    $canvas.canvas.height = canvas.height = element.offsetHeight;\n    canvas.style.position = 'absolute'; //so it fits snuggly in its container\n\n    element.append(canvas);\n    return canvas;\n  }\n\n  function getAlphaPixelsFromImage(imageData) {\n    var step = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n    var alphaPixels = [];\n\n    for (var i = 0, counter = 0; i < imageData.data.length; i++) {\n      if (imageData.data[i]) {\n        counter++;\n\n        if ((i - 3) % 4 === 0 && counter % step === 0 && Math.random() > 0.5) {\n          alphaPixels.push({\n            r: imageData.data[i - 3],\n            g: imageData.data[i - 2],\n            b: imageData.data[i - 1],\n            alpha: imageData.data[i],\n            pixelIndex: (i - 3) / 4\n          });\n        }\n      }\n    }\n\n    return alphaPixels;\n  }\n\n  function getParticlesFromImage(imageData, _ref2) {\n    var particleMaxRadius = _ref2.particleMaxRadius,\n        pointSpacing = _ref2.pointSpacing;\n    var alphaPixels = getAlphaPixelsFromImage(imageData, pointSpacing);\n    var particlesArray = new Float32Array(alphaPixels.length * PARTICLE_PROPS);\n\n    for (var i = 0, particlePointer = 0, x = undefined, y = undefined; i < alphaPixels.length; i++) {\n      x = alphaPixels[i].pixelIndex % imageData.width;\n      y = alphaPixels[i].pixelIndex / imageData.width;\n      particlePointer = i * PARTICLE_PROPS;\n      particlesArray[particlePointer++] = x; //position.x ========= +0 (aka particlePointer's current value)\n\n      particlesArray[particlePointer++] = y; //position.y ========= +1\n\n      particlesArray[particlePointer++] = x; //targetPosition.x === +2\n\n      particlesArray[particlePointer++] = y; //targetPosition.y === +3\n\n      particlesArray[particlePointer++] = randomInRange(0, 1000); //particle.rotationProgress.x ========= +4\n\n      particlesArray[particlePointer++] = randomInRange(0, 1000); //particle.rotationProgress.y ========= +5\n\n      particlesArray[particlePointer++] = randomInRange(-1, 1); //particle.direction.x ================ +6\n\n      particlesArray[particlePointer++] = randomInRange(-1, 1); //particle.direction.y ================ +7\n\n      particlesArray[particlePointer++] = randomInRange(0.5, particleMaxRadius); //particle.radius === +8\n      //colorRGBA values for each particle\n\n      particlesArray[particlePointer++] = alphaPixels[i].r; //+9\n\n      particlesArray[particlePointer++] = alphaPixels[i].g; //+10\n\n      particlesArray[particlePointer++] = alphaPixels[i].b; //+11\n\n      particlesArray[particlePointer] = alphaPixels[i].alpha; //+12\n    }\n\n    return particlesArray;\n  }\n\n  var textContainer = document.getElementById('text-container');\n  var STRING = \"Hello, Codepen! ❤︎\";\n  var T = new ParticleText(STRING, textContainer, {\n    particles: {\n      pointSpacing: 5,\n      particleMaxRadius: 2,\n      revolutionRadius: 2,\n      revolutionSlowness: 5\n    },\n    text: {\n      fontSize: 100,\n      fontFamily: 'serif'\n    }\n  });\n  T.animate();\n  console.log(\"Particles rendering: \".concat(T.particles.length / PARTICLE_PROPS));\n};"],"sourceRoot":""}