{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./tmp/js/script.js"],"names":[],"mappings":"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ACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA,wCAAwC,8CAA8C;AACtF;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;;AAEtC;AACA;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,mBAAmB,sBAAsB;AACzC;AACA;;AAEA;AACA,OAAO;;AAEP,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;;AAEP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,uDAAuD;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,GAAG,GAAG;AACN;AACA;AACA;;;AAGA,gEAAgE;;AAEhE,gCAAgC;AAChC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;;AAEP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,oCAAoC;;AAEpC,cAAc;;AAEd;AACA;AACA;AACA;AACA,GAAG,EAAE;;AAEL;AACA,E","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./tmp/js/script.js\");\n","\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nwindow.onload = function () {\n  var PI2 = Math.PI * 2;\n  var SIN = Math.sin;\n  var COS = Math.cos;\n  /*\t\t/$$$$$$                                      /$$$$$$$                                      /$$$$$$$$ /$$           /$$\n  \t\t/$$__  $$                                    | $$__  $$                                    | $$_____/| $$          | $$\n  \t\t| $$  \\__/ /$$   /$$  /$$$$$$   /$$$$$$       | $$  \\ $$ /$$   /$$  /$$$$$$   /$$$$$$       | $$      | $$ /$$   /$$| $$\n  \t\t|  $$$$$$ | $$  | $$ /$$__  $$ |____  $$      | $$  | $$| $$  | $$ /$$__  $$ |____  $$      | $$$$$   | $$| $$  | $$| $$\n  \t\t\\____  $$| $$  | $$| $$  \\ $$  /$$$$$$$      | $$  | $$| $$  | $$| $$  \\ $$  /$$$$$$$      | $$__/   | $$| $$  | $$|__/\n  \t\t/$$  \\ $$| $$  | $$| $$  | $$ /$$__  $$      | $$  | $$| $$  | $$| $$  | $$ /$$__  $$      | $$      | $$| $$  | $$\n  \t\t|  $$$$$$/|  $$$$$$/| $$$$$$$/|  $$$$$$$      | $$$$$$$/|  $$$$$$/| $$$$$$$/|  $$$$$$$      | $$      | $$|  $$$$$$$ /$$\n  \t\t\\______/  \\______/ | $$____/  \\_______/      |_______/  \\______/ | $$____/  \\_______/      |__/      |__/ \\____  $$|__/\n  \t\t\t\t\t\t\t\t\t| $$                                          | $$                                     /$$  | $$\n  \t\t\t\t\t\t\t\t\t| $$                                          | $$                                    |  $$$$$$/\n  \t\t\t\t\t\t\t\t\t|__/                                          |__/                                     \\______/     */\n  ///////////////////////\n  // UTILITY FUNCTIONS //\n  ///////////////////////\n  //some utility functions\n\n  function randomInRange(min, max) {\n    return Math.random() * (max - min) + min;\n  } //I'll leave this here just in case anyone wants to play with the particles rgb channels\n  //(P-P-PROTIP: setting the blue and red channels with this function makes for a cool palette)\n\n\n  function randomIntInRange(min, max) {\n    return ~~(Math.random() * (max - min) + min);\n  }\n\n  function mergeObjects(target, object) {\n    var deep = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    for (var prop in object) {\n      if (target.hasOwnProperty(prop)) {\n        if (_typeof(object[prop]) === 'object' && deep) {\n          target[prop] = mergeObjects(target[prop], object[prop], true);\n        } else {\n          target[prop] = object[prop];\n        }\n      } else {\n        target[prop] = object[prop];\n      }\n    }\n\n    return target;\n  }\n\n  function chooseRandomFrom(array) {\n    return array[~~(Math.random() * array.length)];\n  }\n\n  function createSupaDupaGradient(context) {\n    var canvas = context.canvas,\n        gradient = context.createRadialGradient(canvas.width / 2, canvas.height / 2, canvas.width / 5, canvas.width / 2, canvas.height / 2, canvas.width * 0.7);\n    gradient.addColorStop(0, '#550e8f');\n    gradient.addColorStop(1, '#101010');\n    return gradient;\n  } //create a canvas with the same size of a given one and return its context\n\n\n  function createCanvasFrom(canvas) {\n    var referenceCanvas = document.createElement('canvas');\n    var $referenceCanvas = referenceCanvas.getContext('2d');\n    $referenceCanvas.canvas.width = referenceCanvas.width = canvas.width;\n    $referenceCanvas.canvas.height = referenceCanvas.height = canvas.height;\n    return $referenceCanvas;\n  } //create a new canvas fitting it inside a parent container specified by the user\n\n\n  function createFitCanvas(element) {\n    var canvas = document.createElement('canvas');\n    var $canvas = canvas.getContext('2d');\n    $canvas.canvas.width = canvas.width = element.offsetWidth;\n    $canvas.canvas.height = canvas.height = element.offsetHeight;\n    canvas.style.position = 'absolute'; //so it fits snuggly in its container\n\n    element.append(canvas);\n    return canvas;\n  } //get active pixels from the canvas we are rendering the text to\n\n\n  function getAlphaPixelsFromImage(imageData) {\n    var step = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n    var alphaPixels = [];\n\n    for (var i = 0, counter = 0; i < imageData.data.length; i++) {\n      if (imageData.data[i]) {\n        counter++;\n\n        if ((i - 3) % 4 === 0 && counter % step === 0 && Math.random() > 0.5) {\n          alphaPixels.push({\n            r: imageData.data[i - 3],\n            g: imageData.data[i - 2],\n            b: imageData.data[i - 1],\n            alpha: imageData.data[i],\n            pixelIndex: (i - 3) / 4\n          });\n        }\n      }\n    }\n\n    return alphaPixels;\n  } //get an array of Floats containing the particle data we are etracting from our render text\n\n\n  function getParticlesFromImage(imageData, _ref) {\n    var particleProps = _ref.particleProps,\n        particleMaxRadius = _ref.particleMaxRadius,\n        pointSpacing = _ref.pointSpacing,\n        palette = _ref.palette;\n    var alphaPixels = getAlphaPixelsFromImage(imageData, pointSpacing);\n    var particlesArray = new Float32Array(alphaPixels.length * particleProps);\n\n    for (var i = 0, particlePointer = 0, x = undefined, y = undefined, color = undefined; i < alphaPixels.length; i++) {\n      if (palette) {\n        color = chooseRandomFrom(palette);\n      }\n\n      x = alphaPixels[i].pixelIndex % imageData.width;\n      y = alphaPixels[i].pixelIndex / imageData.width;\n      particlePointer = i * particleProps;\n      particlesArray[particlePointer++] = x; //position.x ========= +0 (aka particlePointer's current value, aka a particle's address in memory)\n\n      particlesArray[particlePointer++] = y; //position.y ========= +1\n\n      particlesArray[particlePointer++] = x; //targetPosition.x === +2\n\n      particlesArray[particlePointer++] = y; //targetPosition.y === +3\n\n      particlesArray[particlePointer++] = randomInRange(0, 1000); //particle.rotationProgress.x ====== +4\n\n      particlesArray[particlePointer++] = randomInRange(0, 1000); //particle.rotationProgress.y ====== +5\n\n      particlesArray[particlePointer++] = randomInRange(-1, 1); //particle.direction.x ============= +6\n\n      particlesArray[particlePointer++] = randomInRange(-1, 1); //particle.direction.y ============= +7\n\n      particlesArray[particlePointer++] = randomInRange(0.5, particleMaxRadius); //particle.radius === +8\n      //colorRGBA values for each particle\n\n      particlesArray[particlePointer++] = palette ? color[\"r\"] : alphaPixels[i].r; //particles's color's \"red\" channel ===== +9\n\n      particlesArray[particlePointer++] = palette ? color[\"g\"] : alphaPixels[i].g; //particles's color's \"green\" channel === +10\n\n      particlesArray[particlePointer++] = palette ? color[\"b\"] : alphaPixels[i].b; //particles's color's \"blue\" channel ==== +11\n\n      particlesArray[particlePointer] = alphaPixels[i].alpha; //particles's color's \"alpha\" channel ====================== +12\n    }\n\n    return particlesArray;\n  } /////////////\n  // CLASSES //\n  /////////////\n\n\n  var ParticleText = /*#__PURE__*/function () {\n    function ParticleText(string, element) {\n      var _this = this;\n\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      _classCallCheck(this, ParticleText);\n\n      _defineProperty(this, \"animate\", function () {\n        _this.renderParticles(_this.settings.particles);\n\n        _this.frameID = window.requestAnimationFrame(_this.animate);\n      });\n\n      var _particleProps = 13; //<----- you shouldn't touch this guy right here, but I ain't your dad, so if you really want to, go ahead and change it\n      //setting up the canvases needed for ParticleText\n\n      var canvas = createFitCanvas(element);\n      var $referenceCanvas = createCanvasFrom(canvas);\n      var _defaults = {\n        particles: {\n          //canvas background color\n          background: undefined,\n          //particle shape\n          pointSpacing: 5,\n          particleMaxRadius: 2,\n          palette: [],\n          //particle motion\n          revolutionRadius: 2,\n          revolutionSlowness: 5,\n          //only update half of the particles each cycle, repaint every other cycle\n          enhancedRendering: true\n        },\n        //text default settings\n        text: {\n          fontSize: 150,\n          fontFamily: 'serif',\n          padding: 50,\n          lineHeight: undefined\n        }\n      }; //deep merge user supplied arguments and the defaults\n\n      this.settings = mergeObjects(_defaults, options, true); //I am adding this property later simply because I don't want the user to change it easily\n      //(If you are a professional reading this, how would you go about doing this in a cleaner way?? Comment below to let me know, it would be greatly appreciated!)\n\n      this.settings.particles.particleProps = _particleProps; //reference to the parent element of the rendering canvas\n\n      this.parent = element; //the actual canvas element we are using to display the animation on the page\n\n      this.canvas = canvas; //get the rendering context for our super dupa fly particles!\n\n      this.context = canvas.getContext('2d'); //create a new instance of Text passing all of the text properties\n\n      this.text = new Text(string, $referenceCanvas, this.settings.text).initialise(); //extract our particles from the canvas stored in memory that we are using to draw our text reference\n\n      this.particles = getParticlesFromImage(this.text.image, this.settings.particles); //create the pointer that will let us navigate through the particle array (which is a Float32Array)\n\n      this.particlePointer = null; //I am admittedly being a bit cheeky here... With enhancedRendering we are only updating half of the particles each cycle and rendering all of them at once every other cycle\n\n      this.enhancedRendering = this.settings.particles.enhancedRendering ? {\n        lastUpdated: 0,\n        half: Math.floor(this.particles.length / 2),\n        ready: false\n      } : false; //log wether we are using the enhancedRendering utility\n\n      if (this.enhancedRendering) console.log('enhancedRendering is active'); //will hold the ID frame\n\n      this.frameID = undefined;\n    } //change the text's object string and refresh the particle array\n\n\n    _createClass(ParticleText, [{\n      key: \"updateText\",\n      value: function updateText(string) {\n        this.text.update(string);\n        this.particles = getParticlesFromImage(this.text.image, this.settings.particles);\n      } //update a single particle\n\n    }, {\n      key: \"updateCurrentParticle\",\n      value: function updateCurrentParticle(_ref2) {\n        var revolutionSlowness = _ref2.revolutionSlowness,\n            revolutionRadius = _ref2.revolutionRadius;\n        this.particles[this.particlePointer + 4] += this.particles[this.particlePointer + 6]; //add the direction.x value of the particle to its movement's progression x value\n\n        this.particles[this.particlePointer + 5] += this.particles[this.particlePointer + 7]; //add the direction.y value of the particle to its movement's progression y value\n\n        this.particles[this.particlePointer] = this.particles[this.particlePointer + 2] + COS(this.particles[this.particlePointer + 4] / revolutionSlowness) * revolutionRadius; // if you are wondering what this is I recommend checking this resource ---> https://en.wikipedia.org/wiki/Lissajous_orbit\n\n        this.particles[this.particlePointer + 1] = this.particles[this.particlePointer + 3] + SIN(this.particles[this.particlePointer + 5] / revolutionSlowness) * revolutionRadius; // basically it's a clever way of achieveing pseudo random trajectories using 2d particles\n      } //draw a single particle\n\n    }, {\n      key: \"drawCurrentParticle\",\n      value: function drawCurrentParticle() {\n        this.context.fillStyle = \"rgba(\".concat(this.particles[this.particlePointer + 9], \", \").concat(this.particles[this.particlePointer + 10], \", \").concat(this.particles[this.particlePointer + 11], \", \").concat(this.particles[this.particlePointer + 12], \")\");\n        this.context.beginPath();\n        this.context.arc(this.particles[this.particlePointer], this.particles[this.particlePointer + 1], this.particles[this.particlePointer + 8], 0, PI2);\n        this.context.fill();\n      } //get canvas ready for a repaint by either clearing it or drawing a background on top of it, up to you\n\n    }, {\n      key: \"prepareCanvas\",\n      value: function prepareCanvas(_ref3) {\n        var background = _ref3.background;\n\n        if (background) {\n          this.context.fillStyle = background;\n          this.context.fillRect(0, 0, this.context.canvas.width, this.context.canvas.height);\n        } else {\n          this.context.clearRect(0, 0, this.context.canvas.width, this.context.canvas.height);\n        }\n      }\n    }, {\n      key: \"setBackground\",\n      value: function setBackground(background) {\n        this.settings.particles.background = background;\n      } //the heart of the rendering process\n\n    }, {\n      key: \"renderParticles\",\n      value: function renderParticles(particleSettings) {\n        if (this.enchancedRendering) {\n          if (this.enchancedRendering.ready) {\n            this.prepareCanvas(particleSettings);\n\n            for (this.particlePointer = 0; this.particlePointer < this.particles.length; this.particlePointer += particleSettings.particleProps) {\n              this.drawCurrentParticle();\n            }\n\n            this.enchancedRendering.ready = false;\n            this.enchancedRendering.lastUpdated = 0;\n          } else {\n            for (this.particlePointer = this.enchancedRendering.lastUpdated; this.particlePointer < (this.particlePointer === 0 ? this.enchancedRendering.half : this.particles.length); this.enchancedRendering.lastUpdated += particleSettings.particleProps, this.particlePointer += particleSettings.particleProps) {\n              this.updateCurrentParticle(particleSettings);\n            }\n\n            if (this.enchancedRendering.lastUpdated === this.particles.length) {\n              this.enchancedRendering.ready = true;\n              this.enchancedRendering.lastUpdated = 0;\n            }\n          }\n        } else {\n          this.prepareCanvas(particleSettings);\n\n          for (this.particlePointer = 0; this.particlePointer < this.particles.length; this.particlePointer += particleSettings.particleProps) {\n            this.updateCurrentParticle(particleSettings);\n            this.drawCurrentParticle();\n          }\n        }\n      }\n    }, {\n      key: \"resize\",\n      value: function resize() {\n        this.context.canvas.width = this.canvas.width = this.parent.offsetWidth;\n        this.context.canvas.height = this.canvas.height = this.parent.offsetHeight;\n        this.text.resize(this.canvas);\n        this.particles = getParticlesFromImage(this.text.image, this.settings.particles);\n      } //function to kick off the animation\n\n    }]);\n\n    return ParticleText;\n  }();\n\n  var Text = /*#__PURE__*/function () {\n    function Text(string, context, options) {\n      _classCallCheck(this, Text);\n\n      this.string = string;\n      this.context = context;\n      this.fontFamily = options.fontFamily;\n      this.fontSize = options.fontSize;\n      this.font = this.context.font = \"\".concat(this.fontSize, \"px \").concat(this.fontFamily);\n      this.padding = options.padding;\n      this.image = undefined;\n      this.lineHeight = options.lineHeight || options.fontSize;\n      this.optionsReference = options; //set default baseline and text horizontal alignment in our reference canvas\n\n      this.context.textBaseline = this.optionsReference.textBaseline = 'top';\n      this.context.textAlign = this.optionsReference.textAlign = 'center';\n    } //format the string to make it look a little nicer and well centered\n\n\n    _createClass(Text, [{\n      key: \"renderFormattedString\",\n      value: function renderFormattedString() {\n        var words = this.string.split(\" \"),\n            finalText = [];\n        var line = \"\",\n            x,\n            y,\n            i;\n\n        for (i = 0; i < words.length; i++) {\n          if (this.context.measureText(line + words[i] + \" \").width >= this.context.canvas.width - this.padding * 2) {\n            finalText.push(line);\n            line = \"\";\n          }\n\n          line += words[i] + \" \";\n        }\n\n        finalText.push(line);\n        var totalTextHeight = this.fontSize * finalText.length;\n\n        for (i = 0; i < finalText.length; i++) {\n          this.context.fillText(finalText[i], this.padding + this.context.canvas.width / 2, this.context.canvas.height / 2 - totalTextHeight / 2 + this.lineHeight * i);\n        }\n\n        this.image = this.context.getImageData(0, 0, this.context.canvas.width, this.context.canvas.height);\n      } //initilise this Text instance\n\n    }, {\n      key: \"initialise\",\n      value: function initialise() {\n        this.renderFormattedString();\n        return this;\n      } //change string and update the imageData property\n\n    }, {\n      key: \"update\",\n      value: function update(string) {\n        this.string = string;\n        this.context.clearRect(0, 0, this.context.canvas.width, this.context.canvas.height);\n        this.renderFormattedString();\n        return this;\n      }\n    }, {\n      key: \"setFontSize\",\n      value: function setFontSize(fontSize) {\n        this.fontSize = fontSize;\n        this.font = this.context.font = \"\".concat(this.fontSize, \"px \").concat(this.fontFamily);\n        return this;\n      }\n    }, {\n      key: \"setFontFamily\",\n      value: function setFontFamily(fontFamily) {\n        this.fontFamily = fontFamily;\n        this.font = this.context.font = \"\".concat(this.fontSize, \"px \").concat(this.fontFamily);\n        return this;\n      }\n    }, {\n      key: \"resize\",\n      value: function resize(mainCanvas) {\n        this.context.canvas.width = mainCanvas.width;\n        this.context.canvas.height = mainCanvas.height; //reset last context\n\n        this.fontFamily = this.optionsReference.fontFamily;\n        this.fontSize = this.optionsReference.fontSize;\n        this.font = this.context.font = \"\".concat(this.fontSize, \"px \").concat(this.fontFamily);\n        this.lineHeight = this.optionsReference.lineHeight || this.optionsReference.fontSize;\n        this.context.textBaseline = this.optionsReference.textBaseline;\n        this.context.textAlign = this.optionsReference.textAlign;\n        this.renderFormattedString();\n      }\n    }]);\n\n    return Text;\n  }(); //////////////////\n  // ALL THE REST //\n  //////////////////\n  //this will be the container for our particle animation\n\n\n  var textContainer = document.getElementById('text-container'); //SUPER DUPA FLY!\n\n  var STRING = \"Supa Dupa Fly!\"; //create the particle text (play around with the settings if you have a minute, it's quite fun!)\n  //I'll throw this on GitHub too, if anyone wants to fork it. Cheers!\n\n  var T = new ParticleText(STRING, textContainer, {\n    particles: {\n      enhancedRendering: true,\n      pointSpacing: 5,\n      particleMaxRadius: 2.5,\n      revolutionRadius: 3,\n      palette: [{\n        r: 250,\n        g: 0,\n        b: 0\n      }, {\n        r: 245,\n        g: 232,\n        b: 47\n      }, {\n        r: 166,\n        g: 230,\n        b: 48\n      }, {\n        r: 76,\n        g: 184,\n        b: 245\n      }] // <---- these colors are defo SUPA DUPA FLY!\n\n    },\n    text: {\n      fontFamily: 'Rock Salt',\n      padding: 20,\n      fontSize: 130,\n      lineHeight: 150\n    }\n  });\n  var SUPADUPAGRADIENT = createSupaDupaGradient(T.context);\n  T.setBackground(SUPADUPAGRADIENT); //do the thing\n\n  T.animate(); //resize literally everything & adapt gradient background\n\n  window.addEventListener('resize', function () {\n    T.resize();\n    SUPADUPAGRADIENT = createSupaDupaGradient(T.context);\n    T.setBackground(SUPADUPAGRADIENT);\n  }); //log how many particles are buzzing around\n\n  console.log(\"Particles rendering: \".concat(T.particles.length / T.settings.particles.particleProps));\n};"],"sourceRoot":""}